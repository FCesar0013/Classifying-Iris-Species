{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Classifying Iris Species","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM6802brB7py8ZfImvEC+vY"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"H_OZ1bM6oiZ8"},"source":["The data that is used to make the iris from sklearn.datasets, with this it will help us to make the classification of iris species"]},{"cell_type":"code","metadata":{"id":"t5494kbMzSO6"},"source":["from sklearn.datasets import load_iris\n","iris_dataset = load_iris()\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import mglearn"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TsC30BJe0KtM"},"source":["The target of load_iris can function as a Dictionary, which contains keys and values:"]},{"cell_type":"code","metadata":{"id":"kvpaPPWC2omB","executionInfo":{"status":"ok","timestamp":1603421816585,"user_tz":300,"elapsed":417,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"8e645a4c-a231-464d-b160-401b6750e8a0","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(\"Keys of iris_dataset: \\n{}\".format(iris_dataset.keys()))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Keys of iris_dataset: \n","dict_keys(['data', 'target', 'target_names', 'DESCR', 'feature_names', 'filename'])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-vDdvY03iMn9"},"source":["At this point it will be used to describe the dataset with the DESCR key."]},{"cell_type":"code","metadata":{"id":"jVYh_m6xh9wG","executionInfo":{"status":"ok","timestamp":1603424240760,"user_tz":300,"elapsed":441,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"59a99dd6-6dbd-470a-ee0c-df6b1d99cbc4","colab":{"base_uri":"https://localhost:8080/","height":187}},"source":["print(iris_dataset['DESCR'][:193] + \"\\n...\")"],"execution_count":28,"outputs":[{"output_type":"stream","text":[".. _iris_dataset:\n","\n","Iris plants dataset\n","--------------------\n","\n","**Data Set Characteristics:**\n","\n","    :Number of Instances: 150 (50 in each of three classes)\n","    :Number of Attributes: 4 numeric, pre\n","...\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7ebfO5NJiJyE"},"source":["For the string array we will use the value of the target_names key"]},{"cell_type":"code","metadata":{"id":"mpRTRbrVh5Bc","executionInfo":{"status":"ok","timestamp":1603424247328,"user_tz":300,"elapsed":571,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"581702cb-af59-4037-ae6f-4837a3ce598a","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(\"Target names: {}\".format(iris_dataset['target_names']))"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Target names: ['setosa' 'versicolor' 'virginica']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iAKCgPy6iIzk"},"source":["For the description of each feature the value of feature_names is used as a string list"]},{"cell_type":"code","metadata":{"id":"lkiHCBpbh0z0","executionInfo":{"status":"ok","timestamp":1603424250808,"user_tz":300,"elapsed":435,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"9ff73f36-6ad9-403d-ab82-c65feba95935","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(\"Feature names: \\n{}\".format(iris_dataset['feature_names']))"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Feature names: \n","['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FL_3MpNpiITU"},"source":["The data contained is in data and destination fields. The data that is used are the measurements of the length and width in a Numpy array."]},{"cell_type":"code","metadata":{"id":"BZHGXPfqhwOX","executionInfo":{"status":"ok","timestamp":1603424252812,"user_tz":300,"elapsed":374,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"c930055e-81a4-46f2-fa0c-c55a9dfcf95d","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(\"Type of data: {}\".format(type(iris_dataset['data'])))"],"execution_count":31,"outputs":[{"output_type":"stream","text":["Type of data: <class 'numpy.ndarray'>\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7MXzr5GriHpE"},"source":["The rows in the data array correspond to flowers, while the columns represent the four measurements that were taken for each flower:"]},{"cell_type":"code","metadata":{"id":"Khh8rigw3GPr","executionInfo":{"status":"ok","timestamp":1603421820178,"user_tz":300,"elapsed":403,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"ff767679-bffe-40c5-d165-a4693f84ad26","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(\"Shape of data: {}\".format(iris_dataset['data'].shape))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Shape of data: (150, 4)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"H1Ts-BnulkpO"},"source":["The matrix is ​​identified as containing measures of 150 different values. taking into account that the elements are the samples of automatic learning and the properties are called characteristics. The matrix its data form is the number of samples that is multiplied by the number of functions. This identifies the characteristic values ​​of the first five samples."]},{"cell_type":"code","metadata":{"id":"UVHptExe8DkM","executionInfo":{"status":"ok","timestamp":1603421822563,"user_tz":300,"elapsed":395,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"1964e2d2-5861-449f-da91-23c9fd2733ea","colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["print(\"First five columns of data:\\n{}\".format(iris_dataset['data'][:5]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["First five columns of data:\n","[[5.1 3.5 1.4 0.2]\n"," [4.9 3.  1.4 0.2]\n"," [4.7 3.2 1.3 0.2]\n"," [4.6 3.1 1.5 0.2]\n"," [5.  3.6 1.4 0.2]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tHGuLWhGF9gU"},"source":["The target array contains the values ​​that were measured, also as a NumPy array:"]},{"cell_type":"code","metadata":{"id":"cacPQe-k8D4D","executionInfo":{"status":"ok","timestamp":1603421824396,"user_tz":300,"elapsed":382,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"05070ea0-98ed-49ba-cf0a-9ee94e108c86","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(\"Type of target: {}\".format(type(iris_dataset['target'])))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Type of target: <class 'numpy.ndarray'>\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"n2TOsv4YF9_s"},"source":["For the one-dimensional array the target is used"]},{"cell_type":"code","metadata":{"id":"4Ws0DQll8EJs","executionInfo":{"status":"ok","timestamp":1603421826047,"user_tz":300,"elapsed":440,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"af38af32-2fa0-482f-a91b-e7f6a04d7fc9","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(\"Shape of target: {}\".format(iris_dataset['target'].shape))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Shape of target: (150,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"E3WiLMlaF-cE"},"source":["The species are encoded as integers from 0 to 2"]},{"cell_type":"code","metadata":{"id":"9TJzeudH8Ebz","executionInfo":{"status":"ok","timestamp":1603421827709,"user_tz":300,"elapsed":414,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"bdb6e4fa-592d-4608-bdaa-0fbfdba4b705","colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["print(\"Target:\\n{}\".format(iris_dataset['target']))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Target:\n","[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"G1hoTaOt8sCB"},"source":["**Measuring Success: Training and Testing Data**"]},{"cell_type":"markdown","metadata":{"id":"9zzNM-_Coq98"},"source":["In scikit-learn, data is usually denoted with a capital X, while labels are denoted by\n","a lowercase y. This is inspired by the standard formulation f(x)=y in mathematics,\n","where x is the input to a function and y is the output. Following more conventions\n","from mathematics, we use a capital X because the data is a two-dimensional array (a\n","matrix) and a lowercase y because the target is a one-dimensional array (a vector).\n","Let’s call train_test_split on our data and assign the outputs using this nomencla‐\n","ture:"]},{"cell_type":"code","metadata":{"id":"Gh3FVriX8EuT"},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(\n"," iris_dataset['data'], iris_dataset['target'], random_state=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2ZPC4dr0F_s0"},"source":["The output of the train_test_split function is X_train, X_test, y_train, and\n","y_test, which are all NumPy arrays. X_train contains 75% of the rows of the dataset,\n","and X_test contains the remaining 25%:"]},{"cell_type":"code","metadata":{"id":"dXc5OhYt8E_b","executionInfo":{"status":"ok","timestamp":1603421834051,"user_tz":300,"elapsed":420,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"b6d92014-f950-4d16-fe18-2dfb51b0289e","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(\"X_train shape: {}\".format(X_train.shape))\n","print(\"y_train shape: {}\".format(y_train.shape))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X_train shape: (112, 4)\n","y_train shape: (112,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tHhPie7m8FVD","executionInfo":{"status":"ok","timestamp":1603421836670,"user_tz":300,"elapsed":543,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"5664359d-0845-47d3-90bd-2f711583f8a9","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(\"X_test shape: {}\".format(X_test.shape))\n","print(\"y_test shape: {}\".format(y_test.shape))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X_test shape: (38, 4)\n","y_test shape: (38,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OWD0A8Q1816s"},"source":["**First Things First: Look at Your Data**"]},{"cell_type":"markdown","metadata":{"id":"1fDUhwXnpg5I"},"source":["Before building a machine learning model it is often a good idea to inspect the data,\n","to see if the task is easily solvable without machine learning, or if the desired infor‐\n","mation might not be contained in the data\n","\n","\n","The data points are colored\n","according to the species the iris belongs to. To create the plot, we first convert the\n","NumPy array into a pandas DataFrame. pandas has a function to create pair plots\n","called scatter_matrix. The diagonal of this matrix is filled with histograms of each\n","feature:"]},{"cell_type":"code","metadata":{"id":"y4qqIwWT841V"},"source":["# create dataframe from data in X_train\n","# label the columns using the strings in iris_dataset.feature_names\n","iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)\n","# create a scatter matrix from the dataframe, color by y_train\n","grr = pd.scatter_matrix(iris_dataframe, c=y_train, figsize=(15, 15), marker='o',\n"," hist_kwds={'bins': 20}, s=60, alpha=.8, cmap=mglearn.cm3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"URZk7ZC-8-Yk"},"source":["**Building Your First Model: k-Nearest Neighbors**"]},{"cell_type":"markdown","metadata":{"id":"8CjWWj9QqABH"},"source":["All machine learning models in scikit-learn are implemented in their own classes,\n","which are called Estimator classes. The k-nearest neighbors classification algorithm\n","is implemented in the KNeighborsClassifier class in the neighbors module. Before\n","we can use the model, we need to instantiate the class into an object. This is when we\n","will set any parameters of the model. The most important parameter of KNeighbor\n","sClassifier is the number of neighbors, which we will set to 1:"]},{"cell_type":"code","metadata":{"id":"RZi2x_xi9Cr0"},"source":["from sklearn.neighbors import KNeighborsClassifier\n","knn = KNeighborsClassifier(n_neighbors=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eRZhjydoGFpM"},"source":["To build the model on the training set, we call the fit method of the knn object,\n","which takes as arguments the NumPy array X_train containing the training data and\n","the NumPy array y_train of the corresponding training labels:"]},{"cell_type":"code","metadata":{"id":"8StB6qzr9IRV","executionInfo":{"status":"ok","timestamp":1603421865269,"user_tz":300,"elapsed":347,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"189c1119-3713-482b-e5a7-f80d5215db8d","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["knn.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n","                     metric_params=None, n_jobs=None, n_neighbors=1, p=2,\n","                     weights='uniform')"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"zX3OAzZf9LKj"},"source":["**Making Predictions**"]},{"cell_type":"markdown","metadata":{"id":"qb6c5NYBqq2P"},"source":["We can now make predictions using this model on new data for which we might not\n","know the correct labels. Imagine we found an iris in the wild with a sepal length of\n","5 cm, a sepal width of 2.9 cm, a petal length of 1 cm, and a petal width of 0.2 cm.\n","\n","We can put this data into a NumPy array, again by\n","calculating the shape—that is, the number of samples multiplied by the number of\n","features."]},{"cell_type":"code","metadata":{"id":"jl-kPvg49OTr","executionInfo":{"status":"ok","timestamp":1603421868261,"user_tz":300,"elapsed":428,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"df3a3592-0e71-4a86-d10c-2c8e65aeeedf","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_new = np.array([[5, 2.9, 1, 0.2]])\n","print(\"X_new.shape: {}\".format(X_new.shape))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X_new.shape: (1, 4)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lipm767UGRaV"},"source":["Note that we made the measurements of this single flower into a row in a twodimensional NumPy array, as scikit-learn always expects two-dimensional arrays\n","for the data.\n","\n","To make a prediction, we call the predict method of the knn object:"]},{"cell_type":"code","metadata":{"id":"I6G-Qdk99Q_b","executionInfo":{"status":"ok","timestamp":1603421872557,"user_tz":300,"elapsed":357,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"f61cebc2-295e-454e-9094-bb5af89c8f8d","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["prediction = knn.predict(X_new)\n","print(\"Prediction: {}\".format(prediction))\n","print(\"Predicted target name: {}\".format(\n"," iris_dataset['target_names'][prediction]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Prediction: [0]\n","Predicted target name: ['setosa']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KQVrEEYZ9WXk"},"source":["**Evaluating the Model**"]},{"cell_type":"markdown","metadata":{"id":"dJDrGA0nrMmR"},"source":["This is where the test set that we created earlier comes in. This data was not used to\n","build the model, but we do know what the correct species is for each iris in the test\n","set.\n","\n","Therefore, we can make a prediction for each iris in the test data and compare it\n","against its label (the known species). We can measure how well the model works by\n","computing the accuracy, which is the fraction of flowers for which the right species\n","was predicted:"]},{"cell_type":"code","metadata":{"id":"iQuKG_Fp9a09","executionInfo":{"status":"ok","timestamp":1603421874061,"user_tz":300,"elapsed":349,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"b6917504-a9ac-483e-f5a8-63c99094dcdb","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["y_pred = knn.predict(X_test)\n","print(\"Test set predictions:\\n {}\".format(y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test set predictions:\n"," [2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0\n"," 2]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wA6Z_9Qb9c70","executionInfo":{"status":"ok","timestamp":1603421876172,"user_tz":300,"elapsed":341,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"71383269-de54-44bd-f02b-f2d460ebba7d","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(\"Test set score: {:.2f}\".format(np.mean(y_pred == y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test set score: 0.97\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SZ2iBK1IGTSF"},"source":["We can also use the score method of the knn object, which will compute the test set\n","accuracy for us:"]},{"cell_type":"code","metadata":{"id":"DJ314wun9f1k","executionInfo":{"status":"ok","timestamp":1603421878136,"user_tz":300,"elapsed":377,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"180fdd7c-074a-4832-efca-7963a7635f15","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(\"Test set score: {:.2f}\".format(knn.score(X_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test set score: 0.97\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TOHSyj-z9iBM"},"source":["**Summary and Outlook**"]},{"cell_type":"markdown","metadata":{"id":"chTMPRS3rL2p"},"source":["The Iris dataset consists of two NumPy arrays: one containing the data, which is\n","referred to as X in scikit-learn, and one containing the correct or desired outputs, which is called y. The array X is a two-dimensional array of features, with one row per\n","data point and one column per feature. The array y is a one-dimensional array, which\n","here contains one class label, an integer ranging from 0 to 2, for each of the samples.\n","\n","We chose the k-nearest neighbors classification algorithm, which makes predictions\n","for a new data point by considering its closest neighbor(s) in the training set. This is\n","implemented in the KNeighborsClassifier class, which contains the algorithm that\n","builds the model as well as the algorithm that makes a prediction using the model.\n","We instantiated the class, setting parameters. Then we built the model by calling the\n","fit method, passing the training data (X_train) and training outputs (y_train) as\n","parameters. We evaluated the model using the score method, which computes the\n","accuracy of the model. We applied the score method to the test set data and the test\n","set labels and found that our model is about 97% accurate, meaning it is correct 97%\n","of the time on the test set.\n","\n","This gave us the confidence to apply the model to new data (in our example, new\n","flower measurements) and trust that the model will be correct about 97% of the time.\n","\n","Here is a summary of the code needed for the whole training and evaluation\n","procedure:"]},{"cell_type":"code","metadata":{"id":"gaq-Xv0n9kbk","executionInfo":{"status":"ok","timestamp":1603421880819,"user_tz":300,"elapsed":467,"user":{"displayName":"Cesar Perez","photoUrl":"","userId":"16156855445428864056"}},"outputId":"bb50fff2-d015-4d7b-83a6-096efb81d78d","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_train, X_test, y_train, y_test = train_test_split(\n"," iris_dataset['data'], iris_dataset['target'], random_state=0)\n","knn = KNeighborsClassifier(n_neighbors=1)\n","knn.fit(X_train, y_train)\n","print(\"Test set score: {:.2f}\".format(knn.score(X_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test set score: 0.97\n"],"name":"stdout"}]}]}